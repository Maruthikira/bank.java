import java.util.*;

class InsufficientFundsException extends Exception {}

class Account {
    public static int MIN_BALANCE = 500;
    private static long NextAccountNumber = 0;
    private long accountNumber;
    private String firstName;
    private String lastName;
    private float balance;

    public Account() {}

    public Account(String fname, String lname, float balance) {
        NextAccountNumber++;
        accountNumber = NextAccountNumber;
        firstName = fname;
        lastName = lname;
        this.balance = balance;
    }

    public long getAccNo() {
        return accountNumber;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public float getBalance() {
        return balance;
    }

    public void deposit(float amount) {
        balance += amount;
    }

    public void withdraw(float amount) throws InsufficientFundsException {
        if (balance - amount < MIN_BALANCE)
            throw new InsufficientFundsException();
        balance -= amount;
    }

    public static void setLastAccountNumber(long accountNumber) {
        NextAccountNumber = accountNumber;
    }

    public static long getLastAccountNumber() {
        return NextAccountNumber;
    }

    @Override
    public String toString() {
        return "First Name: " + getFirstName() + "\n" +
               "Last Name: " + getLastName() + "\n" +
               "Account Number: " + getAccNo() + "\n" +
               "Balance: " + getBalance() + "\n";
    }
}

class Bank {
    private Map<Long, Account> accounts;

    public Bank() {
        accounts = new HashMap<>();
    }

    public Account openAccount(String fname, String lname, float balance) {
        Account account = new Account(fname, lname, balance);
        accounts.put(account.getAccNo(), account);
        return account;
    }

    public Account balanceEnquiry(long accountNumber) {
        return accounts.get(accountNumber);
    }

    public Account deposit(long accountNumber, float amount) {
        Account account = accounts.get(accountNumber);
        account.deposit(amount);
        return account;
    }

    public Account withdraw(long accountNumber, float amount) throws InsufficientFundsException {
        Account account = accounts.get(accountNumber);
        account.withdraw(amount);
        return account;
    }

    public void closeAccount(long accountNumber) {
        accounts.remove(accountNumber);
    }

    public void showAllAccounts() {
        for (Map.Entry<Long, Account> entry : accounts.entrySet()) {
            long accountNumber = entry.getKey();
            Account account = entry.getValue();
            System.out.println("Account " + accountNumber);
            System.out.println(account);
        }
    }

    // Other methods, if needed
}

public class Main {
    public static void main(String[] args) {
        Bank b = new Bank();
        Account acc;

        int choice;
        String fname, lname;
        long accountNumber;
        float balance;
        float amount;

        Scanner scanner = new Scanner(System.in);
        System.out.println("***Banking System***");

        do {
            System.out.println("\n\tSelect one option below ");
            System.out.println("\n\t1 Open an Account");
            System.out.println("\n\t2 Balance Enquiry");
            System.out.println("\n\t3 Deposit");
            System.out.println("\n\t4 Withdrawal");
            System.out.println("\n\t5 Close an Account");
            System.out.println("\n\t6 Show All Accounts");
            System.out.println("\n\t7 Quit");
            System.out.print("\nEnter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter First Name: ");
                    fname = scanner.next();
                    System.out.print("Enter Last Name: ");
                    lname = scanner.next();
                    System.out.print("Enter initial Balance: ");
                    balance = scanner.nextFloat();
                    acc = b.openAccount(fname, lname, balance);
                    System.out.println("\nCongratulations! Account is Created");
                    System.out.println(acc);
                    break;

                case 2:
                    System.out.print("Enter Account Number: ");
                    accountNumber = scanner.nextLong();
                    acc = b.balanceEnquiry(accountNumber);
                    System.out.println("\nYour Account Details");
                    System.out.println(acc);
                    break;

                case 3:
                    System.out.print("Enter Account Number: ");
                    accountNumber = scanner.nextLong();
                    System.out.print("Enter Balance: ");
                    amount = scanner.nextFloat();
                    acc = b.deposit(accountNumber, amount);
                    System.out.println("\nAmount is Deposited");
                    System.out.println(acc);
                    break;

                case 4:
                    System.out.print("Enter Account Number: ");
                    accountNumber = scanner.nextLong();
                    System.out.print("Enter Balance: ");
                    amount = scanner.nextFloat();
                    try {
                        acc = b.withdraw(accountNumber, amount);
                        System.out.println("\nAmount Withdrawn");
                        System.out.println(acc);
                    } catch (InsufficientFundsException e) {
                        System.out.println("\nInsufficient Funds!");
                    }
                    break;

                case 5:
                    System.out.print("Enter Account Number: ");
                    accountNumber = scanner.nextLong();
                    b.closeAccount(accountNumber);
                    System.out.println("\nAccount is Closed");
                    break;

                case 6:
                    b.showAllAccounts();
                    break;

                case 7:
                    break;

                default:
                    System.out.println("\nEnter correct choice");
                    break;
            }
        } while (choice != 7);

        scanner.close();
    }
}
